// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Prisma Migration Commands:
//
// 1. Generate and apply migration:
//    npx prisma migrate dev --name <your_migration_name>
//    - Generates a new migration based on schema changes and applies it immediately to the development database.
//
// 2. Generate migration without applying:
//    npx prisma migrate dev --name <your_migration_name> --create-only
//    - Generates the migration file but does not apply it to the database right away.
//
// 3. Apply all pending migrations:
//    npx prisma migrate deploy
//    - Applies all migrations that haven't been applied yet (useful in production).
//
// 4. Preview the migration (without applying):
//    npx prisma migrate dev --preview-feature
//    - Shows the migration that would be generated based on current schema changes, without actually applying it.
//
// 5. Reset the database (drops all data and applies all migrations):
//    npx prisma migrate reset
//    - Resets the database by dropping all data and reapplying all migrations from scratch.
//
// 6. Open Prisma Studio to view and edit data:
//    npx prisma studio
//    - Opens an interactive tool to view and manipulate the database data.


generator client {
  provider = "prisma-client-js" 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//each user can be linked to a single guild and single creator profile
model User {
  id                  String                        @id @default(cuid())
  username            String                        @unique
  email               String                        @unique
  role                UserRole
  status              UserStatus
  created_on          DateTime                      @default(now())
  updated_on          DateTime?                     @updatedAt 
  guild               Guild?
  creator             Creator?
  devices             UserDevice[]
  auth_providers      AuthProvider[] 

  @@index([created_on])
  @@index([email])
  @@index([username])
}

//Users can sign in either with email and password, or any supported OAUTH 2.0 provider. 
//
//accounts are linked so each email address will only ever have a single account, but can use
//any supported provider they like to sign in. 
model AuthProvider {
  id                  String             @id @default(uuid())
  user_id             String
  provider            String
  provider_user_id    String?           
  password            String?            
  created_on          DateTime           @default(now())
  user                User               @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_user_id])   
}

model UserDevice {
  id                  String             @id @default(uuid())
  user_id             String
  device_name         String
  user_agent          String
  ip_address          String
  last_signin         DateTime
  session_id          String
  created_on          DateTime           @default(now())
  active              Boolean            @default(true) 
  user                User               @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

//each guild can be linked to multiple languages, regions and tags
model Guild {
  id                  String                        @id @default(cuid())
  name                String                        @unique
  slug                String                        @unique 
  description         String
  excerpt             String
  guild_leader        String? 
  video_url           String                     
  created_on          DateTime                      @default(now())
  updated_on          DateTime?                     @updatedAt
  socials             Json?    
  status              ContentStatus
  regions             GuildRegionRelation[]       
  tags                GuildTagRelation[]
  user_id             String?                       @unique
  user                User?                         @relation(fields: [user_id], references: [id])
  languages           GuildLanguageRelation[] 

  @@index([created_on])
  @@index([slug])
  @@index([status])
  @@index([user_id])
  @@index([name])
}

//multiple tags can be linked to multiple different guilds
model GuildTag {
  id                  String                        @id @default(uuid())
  name                String                        @unique
  description         String?
  guild_tags          GuildTagRelation[]

  @@index([name])
}

model GuildTagRelation {
  id                  String                        @id @default(uuid())
  guild_id            String
  tag_id              String
  guild               Guild                         @relation(fields: [guild_id], references: [id], onDelete: Cascade)
  tag                 GuildTag                      @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@index([guild_id])
  @@index([tag_id])
}

//each creator profile can be linked to multiple languages and tags
model Creator {
  id                  String                        @id @default(uuid())
  name                String                        @unique
  slug                String                        @unique
  description         String
  excerpt             String
  video_url           String           
  created_on          DateTime                      @default(now())
  updated_on          DateTime?                     @updatedAt
  status              ContentStatus   
  socials             Json?
  tags                CreatorTagRelation[]
  user_id             String?                       @unique
  user                User?                         @relation(fields: [user_id], references: [id])
  languages           CreatorLanguageRelation[]

  @@index([created_on])
  @@index([slug])
  @@index([status])
  @@index([user_id])
  @@index([name])
}

//multiple tags can be linked to multiple different creator profiles
model CreatorTag {
  id                  String                        @id @default(uuid())
  name                String                        @unique
  description         String?
  creator_tags        CreatorTagRelation[]

  @@index([name])
}

model CreatorTagRelation {
  id                  String                        @id @default(uuid())
  creator_id          String
  tag_id              String
  creator             Creator                       @relation(fields: [creator_id], references: [id], onDelete: Cascade)
  tag                 CreatorTag                    @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@index([creator_id])
  @@index([tag_id])
}

//multiple languages can be linked to multiple different guilds and creators
model Language {
  id                  String                        @id @default(uuid())
  name                String                        @unique
  creator_languages   CreatorLanguageRelation[]
  guild_languages     GuildLanguageRelation[]

  @@index([name])
}

model CreatorLanguageRelation {
  id                  String                        @id @default(uuid())
  creator_id           String                        
  language_id          String     
  creator             Creator                       @relation(fields: [creator_id], references: [id], onDelete: Cascade)
  language            Language                      @relation(fields: [language_id], references: [id], onDelete: Cascade)                   

  @@index([creator_id])
  @@index([language_id])
}

model GuildLanguageRelation {
  id                  String                        @id @default(uuid())
  guild_id             String                        
  language_id          String                        
  guild               Guild                         @relation(fields: [guild_id], references: [id], onDelete: Cascade)
  language            Language                      @relation(fields: [language_id], references: [id], onDelete: Cascade)
  

  @@index([guild_id])
  @@index([language_id])
}

//multiple regions can be linked to multiple different guilds
model Region {
  id                  String                        @id @default(cuid())
  name                String                        @unique
  guilds_region       GuildRegionRelation[]

  @@index([name])
}

model GuildRegionRelation {
  id                  String                        @id @default(uuid())
  guild_id            String
  region_id           String
  guild               Guild                        @relation(fields: [guild_id], references: [id], onDelete: Cascade)
  region              Region                       @relation(fields: [region_id], references: [id], onDelete: Cascade)

  @@index([guild_id])
  @@index([region_id])
}

enum ContentStatus {
  public
  private
  deleted
}

enum UserRole {
  user
  moderator
  admin
}

enum UserStatus {
  inactive
  active
  banned
  deleted
  locked
}



