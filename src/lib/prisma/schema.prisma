// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
//run "npx prisma migrate dev" command to update schema 
//run "npx prisma migrate reset" command to wipe database

generator client {
  provider = "prisma-client-js" 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                        @id @default(cuid())
  name                String
  email               String                        @unique
  password            String
  role                UserRole
  status              UserStatus
  created_on          DateTime                      @default(now())
  updated_on          DateTime?  
  guild               Guild?
  creator             Creator?

  @@index([created_on])
  @@index([email])
  @@index([name])
}

model Guild {
  id                  String                        @id @default(cuid())
  name                String                        @unique
  slug                String                        @unique 
  description         String
  guild_leader        String?                      
  created_on          DateTime                      @default(now())
  updated_on          DateTime?    
  status              ContentStatus
  languageId          String
  language            Language                      @relation(fields: [languageId], references: [id])
  regionId            String
  region              Region                        @relation(fields: [regionId], references: [id])
  tags                GuildTagRelation[]
  userId              String?                       @unique
  user                User?                         @relation(fields: [userId], references: [id]) 

  @@index([created_on])
  @@index([slug])
  @@index([status])
  @@index([languageId])
  @@index([regionId])
  @@index([userId])
  @@index([name])
}

model GuildTag {
  id                  String                        @id @default(uuid())
  name                String                        @unique
  description         String?
  guildTags           GuildTagRelation[]
}

model GuildTagRelation {
  id                  String                        @id @default(uuid())
  guildId             String
  tagId               String
  guild               Guild                         @relation(fields: [guildId], references: [id])
  tag                 GuildTag                      @relation(fields: [tagId], references: [id])

  @@index([guildId])
  @@index([tagId])
}

model Creator {
  id                  String                        @id @default(uuid())
  name                String                        @unique
  slug                String                        @unique
  description         String
  videoUrl            String           
  created_on          DateTime                      @default(now())
  updated_on          DateTime? 
  status              ContentStatus   
  socials             Json?
  tags                CreatorTagRelation[]
  languageId          String
  language            Language                      @relation(fields: [languageId], references: [id])
  userId              String?                       @unique
  user                User?                         @relation(fields: [userId], references: [id])

  @@index([created_on])
  @@index([slug])
  @@index([status])
  @@index([languageId])
  @@index([userId])
  @@index([name])
}

model CreatorTag {
  id                  String                        @id @default(uuid())
  name                String                        @unique
  description         String?
  creatorTags         CreatorTagRelation[]
}

model CreatorTagRelation {
  id                  String                        @id @default(uuid())
  creatorId           String
  tagId               String
  creator             Creator                       @relation(fields: [creatorId], references: [id])
  tag                 CreatorTag                    @relation(fields: [tagId], references: [id])

  @@index([creatorId])
  @@index([tagId])
}

model Language {
  id                  String                        @id @default(uuid())
  name                String                        @unique
  guilds              Guild[]
  creators            Creator[]

  @@index([name])
}

model Region {
  id                  String                        @id @default(cuid())
  name                String                        @unique
  guilds              Guild[]

  @@index([name])
}

enum ContentStatus {
  public
  private
  deleted
}

enum UserRole {
  user
  moderator
  admin
}

enum UserStatus {
  inactive
  active
  banned
  deleted
  locked
}



